/* const tasksWithTimeLeft: TaskWithTimeLeft[] = taskDescriptionDynamic.map(
    (task) => {
      const diff = new Date(task.timeAt).getTime() - new Date().getTime()

      if (diff <= 0) {
        return {
          ...task,
          timeLeft: 'Concluído',
        }
      } else {
        const days = Math.floor(diff / (1000 * 60 * 60 * 24))
        const hours = Math.floor(
          (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
        ).toLocaleString(undefined, { minimumIntegerDigits: 2 })
        const minutes = Math.floor(
          (diff % (1000 * 60 * 60)) / (1000 * 60),
        ).toLocaleString(undefined, { minimumIntegerDigits: 2 })
        const seconds = Math.floor((diff % (1000 * 60)) / 1000).toLocaleString(
          undefined,
          { minimumIntegerDigits: 2 },
        )

        let timeLeft = ''
        if (days > 0) {
          timeLeft = `${days} dias`
        } else {
          timeLeft = `${hours}:${minutes}:${seconds}`
        }

        return {
          ...task,
          timeLeft,
        }
      }
    },
  ) */

  /* useEffect(() => {
    const intervalId = setInterval(() => {
      const diff =
        new Date(
          taskDescriptionDynamic.map((itemTime) => {
            itemTime.timeAt
          }),
        ).getTime() - new Date().getTime()

      if (diff <= 0) {
        // Conclusion time!
        clearInterval(intervalId)
        setTimeLeft('Concluído')
        alert('O tempo da sua tarefa foi finalizado!')
      } else {
        const days = Math.floor(diff / (1000 * 60 * 60 * 24))
        const hours = Math.floor(
          (diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
        ).toLocaleString(undefined, { minimumIntegerDigits: 2 })
        const minutes = Math.floor(
          (diff % (1000 * 60 * 60)) / (1000 * 60),
        ).toLocaleString(undefined, { minimumIntegerDigits: 2 })
        const seconds = Math.floor((diff % (1000 * 60)) / 1000).toLocaleString(
          undefined,
          { minimumIntegerDigits: 2 },
        )

        // Verification time
        if (days > 0) {
          const result = `${days} dias`
          setTimeLeft(result)
        } else {
          const result = `${hours} : ${minutes} : ${seconds}`
          setTimeLeft(result)
        }
      }
    }, 1000)

    return () => clearInterval(intervalId)
  }, []) */